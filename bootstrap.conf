#! /bin/echo this-file-should-be-sourced,-not-executed.
## -*- Mode: shell-script -*-

## bootstrap -- bootstrapping script
##
##  This file is part of Complexity.
##  Complexity Copyright (c) 2011-2016 by Bruce Korb - all rights reserved
##
## Complexity is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the
## Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## Complexity is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  If not, see <http://www.gnu.org/licenses/>.

gnulib_stuff() {
    # If there's a git directory, then clean the repo
    #
    if test -d .git
    then
        git clean -f -x -d .

    # else if we have a pointer to the source tree, cd to there
    #
    elif test -f .sdir
    then
        cd $(<.sdir)

    # else assume we're next door to the source tree.
    #
    else
        cd $(dirname "$0")/../complexity || \
            die "Cannot locate source directory"
    fi

    # We are now in the source tree for complexity. Assume gnulib is next door
    #
    export GNULIB_SRCDIR=$(realpath ../gnulib)
    v=$(bash ${GNULIB_SRCDIR}/build-aux/git-version-gen \
            $progdir/.tarball-version)
    printf %s $v > $progdir/.tarball-version

    export gnulib_tool=${GNULIB_SRCDIR}/gnulib-tool
    export gnulib_path=${GNULIB_SRCDIR}
    cd $progdir
    ln -s $gnulib_path gnulib
}

initialize()
{
    set -e
    if shopt -qo xtrace
    then
	PS4='+BS-${FUNCNAME:-=}-$LINENO> '
        TRAPPED=false
        tcode='TRAPPED=true sfile=${BASH_SOURCE[0]} sline=${BASH_LINENO[0]}'
        trap "$tcode"' ; die "failed: ${_:-${FUNCNAME[0]}}"' 0
    fi

    set_prog

    # List of programs (and minimum versions) required to bootstrap, maintain
    # and release Libtool.
    buildreq="
        make       3.81        http://www.gnu.org/s/make
        makeinfo   4.8         http://www.gnu.org/s/texinfo
        xz         4.999.8beta http://tukaani.org/xz
"

    gnulib_stuff
    cd $progdir/src
    test -f opts.c -a -f opts.h -a opts.c -nt opts.def || \
        autogen opts.def

    if test -f char-types.h && test char-types.h -nt char-types.map
    then
        :
    else
        cm=`command -v char-mapper`
        if test -x "$cm"
        then $cm char-types.map
        else touch char-types.h
        fi
    fi

    cd ${progdir}
    cp $(autoopts-config pkgdatadir)/liboptschk.m4 m4/.
    sed $'1i\\\n'"New in $v - $(date +'%B %Y')"$'\\\n\n' NEWS > XX
    mv -f XX NEWS

    # Trick automake into "allowing" us to use texinfo rules:
    #
    printf '\\input texinfo\n@setfilename complexity.info\n' \
        > doc/complexity.texi

    gnulib_modules="\
	    close
	    fdl
	    gendocs
	    gpl-3.0
	    malloc-posix
	    snprintf
	    stdbool"
    set +e
}

untrap_die() {
    case "$(trap -p 0)" in
    *TRAPPED=true*' die '* )
        trap '' 0
        ;;
    esac
    ln build-aux/* .
}

. ./"$0.std"

initialize
func_add_hook func_fini untrap_die

# Local Variables:
# mode:shell-script
# sh-indentation:4
# sh-basic-offset:4
# indent-tabs-mode: nil
# End:

# bootstrap.conf ends here
